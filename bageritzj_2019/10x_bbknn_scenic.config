manifest {
   name = 'vib-singlecell-nf/vsn-pipelines'
   description = 'A repository of pipelines for single-cell data in Nextflow DSL2'
   homePage = 'https://github.com/vib-singlecell-nf/vsn-pipelines'
   version = '0.14.2'
   mainScript = 'main.nf'
   defaultBranch = 'master'
   nextflowVersion = '!19.12.0-edge'
}

params {
   global {
      project_name = '5bd69190_20200313__Bageritz_et_al_2019_Larvae_Wing_Disc'
      outdir = 'out'
      qsubaccount = '' // TO EDIT
      qsubemail = '' // TO EDIT
      species = 'fly'
      genome {
         assembly = 'dm6'
      }
   }
   sc {
      scope {
         genome = 'Flybase r6.31 pre-mRNA v3.1 (https://github.com/FlyCellAtlas/genome_references/blob/master/flybase/r6.31/dmel-all-r6.31-premrna.gtf.gz)'
         tree {
            level_1 = 'Public'
            level_2 = 'Wingdisc'
            level_3 = 'Larvae'
         }
      }
      file_converter {
         tagCellWithSampleId = true
         useFilteredMatrix = true
      }
      file_concatenator {
         join = 'outer'
         off = 'h5ad'
      }
      scanpy {
         container = 'vibsinglecellnf/scanpy:0.5.0'
         report {
            annotations_to_plot = []
         }
         feature_selection {
            report_ipynb = '/src/scanpy/bin/reports/sc_select_variable_genes_report.ipynb'
            method = 'mean_disp_plot'
            minMean = 0.0125
            maxMean = 3
            minDisp = 0.5
            off = 'h5ad'
         }
         feature_scaling {
            method = 'zscore_scale'
            maxSD = 10
            off = 'h5ad'
         }
         neighborhood_graph {
            off = 'h5ad'
         }
         dim_reduction {
            report_ipynb = '/src/scanpy/bin/reports/sc_dim_reduction_report.ipynb'
            pca {
               method = 'pca'
               off = 'h5ad'
            }
            umap {
               method = 'umap'
               off = 'h5ad'
            }
            tsne {
               method = 'tsne'
               nJobs = 10
               off = 'h5ad'
            }
         }
         clustering {
            report_ipynb = '/src/scanpy/bin/reports/sc_clustering_report.ipynb'
            methods = ['leiden','louvain']
            resolutions = [0.4,0.8,1.0,1.2,1.6,2.0,4.0,8.0]
            off = 'h5ad'
         }
         marker_genes {
            method = 'wilcoxon'
            ngenes = 0
            off = 'h5ad'
         }
         filter {
            report_ipynb = '/src/scanpy/bin/reports/sc_filter_qc_report.ipynb'
            cellFilterMinNGenes = 200
            cellFilterMaxPercentMito = 0.15
            geneFilterMinNCells = 3
            off = 'h5ad'
            outdir = 'out'
         }
         data_transformation {
            method = 'log1p'
            off = 'h5ad'
         }
         normalization {
            method = 'cpx'
            countsPerCellAfter = 10000
            off = 'h5ad'
         }
         batch_effect_correct {
            method = 'bbknn'
            report_ipynb = '/src/scanpy/bin/reports/sc_bbknn_report.ipynb'
            neighborsWithinBatch = 5
            trim = 0
            off = 'h5ad'
         }
      }
      scenic {
         container = 'aertslab/pyscenic:0.10.0'
         scenicoutdir = 'out/scenic/'
         report_ipynb = '/src/scenic/bin/reports/scenic_report.ipynb'
         filteredLoom = ''
         scenicOutputLoom = 'SCENIC_output.loom'
         scenicScopeOutputLoom = 'SCENIC_SCope_output.loom'
         mode = 'dask_multiprocessing'
         client_or_address = ''
         numWorkers = 19
         cell_id_attribute = 'CellID'
         gene_attribute = 'Gene'
         grn {
            algorithm = 'grnboost2'
            pmem = '2gb'
            maxForks = 5
            numWorkers = 19
            tfs = 'allTFs_dmel.txt' // TO EDIT
         }
         cistarget {
            adj = 'adj.tsv'
            type = ''
            output = 'reg.csv'
            rank_threshold = 5000
            auc_threshold = 0.05
            nes_threshold = 3.0
            min_orthologous_identity = 0.0
            max_similarity_fdr = 0.001
            annotations_fname = ''
            thresholds = '0.75,0.90'
            top_n_targets = 50
            top_n_regulators = '5,10,50'
            min_genes = 20
            pmem = '2gb'
            maxForks = 5
            numWorkers = 19
            motifsDb = 'cistarget/databases/drosophila_melanogaster/dm6/flybase_r6.02/mc8nr/gene_based/dm6-5kb-upstream-full-tx-11species.mc8nr.feather' // TO EDIT
            motifsAnnotation = 'cistarget/motif2tf/motifs-v8-nr.flybase-m0.001-o0.0.tbl' // TO EDIT
            tracksDb = 'encode_modERN_20190621__ChIP_seq.max_GENEBASED.feather' // TO EDIT
            tracksAnnotation = 'encode_modERN_20190621_dm6_annotation.track_to_tf_in_motif_to_tf_format.tsv' // TO EDIT
         }
         aucell {
            output = 'aucell_output.loom'
            rank_threshold = 5000
            auc_threshold = 0.05
            nes_threshold = 3.0
            pmem = '2gb'
            maxForks = 5
            numWorkers = 19
         }
      }
      cellranger {
         container = 'vibsinglecellnf/cellranger:3.1.0'
         labels {
            processExecutor = 'qsub'
         }
         count {
            chemistry = 'SC3Pv2'
            transcriptome = 'flybase/r6.31_premrna_v3/cellranger/3.1.0/flybase_r6.31_premrna_v3.1'
            ppn = 19
            pmem = '6gb'
            walltime = '48:00:00'
            localCores = 19
            localMem = 115
            maxForks = 5
         }
      }
   }
   utils {
      container = 'vibsinglecellnf/utils:0.2.1'
      workflow_configuration {
         report_ipynb = '/src/utils/bin/reports/workflow_configuration_template.ipynb'
      }
      sra_metadata {
         mode = 'web'
      }
   }
   parseConfig = { sample, paramsGlobal, paramsLocal ->
        def lv = { a,b -> return MethodRankHelper.delDistance(a, b) }
        def pL = paramsLocal.collectEntries { k,v ->
           if (v instanceof Map) {
                if (v.containsKey(sample))
                   return [k, v[sample]]
                if (v.containsKey('default'))
                   return [k, v['default']]
                if (lv(k,sample) > 30)
                   return [k,v]
                throw new Exception("Not a valid entry in " + k + ". The sample " + sample + " is not found in " + v +" ; Make sure your samples are correctly specified when using the multi-sample feature.")
           } else {
               return [k,v]
           }
       }
       return [global: paramsGlobal, local: pL]
   }
   data {
      sra = [[id:'SRP187520', samples: ["10x*"]]]
   }
   sratoolkit {
      container = 'vibsinglecellnf/sratoolkit:2.9.4-1.1.0'
      downloadFastqs {
         threads = 6
         maxForks = 5
      }
   }
   pcacv {
      container = 'vibsinglecellnf/pcacv:0.1.0'
      find_optimal_npcs {
         accessor = '@assays$RNA@scale.data'
         nCores = 12
      }
   }
}

process {
   executor = 'local'
   withLabel:qsub {
      executor = 'pbs'
   }
   withLabel:local {
      executor = 'local'
   }
}

timeline {
   enabled = true
   file = 'out/nextflow_reports/execution_timeline.html'
}

report {
   enabled = true
   file = 'out/nextflow_reports/execution_report.html'
}

trace {
   enabled = true
   file = 'out/nextflow_reports/execution_trace.txt'
}

dag {
   enabled = true
   file = 'out/nextflow_reports/pipeline_dag.svg'
}

min {
   enabled = false
}

singularity {
   enabled = true
   autoMounts = true
   runOptions = '-B ' // TO EDIT
}
