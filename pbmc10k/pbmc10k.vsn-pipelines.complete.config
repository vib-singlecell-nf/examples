singularity {
   cacheDir = '/ddn1/vol1/staging/leuven/stg_00002/lcb/lcb_projects/Pipeline_Dev/containers/'
   enabled = true
   autoMounts = true
   runOptions = '-B /ddn1,/staging'
}

manifest {
   name = 'vib-singlecell-nf/vsn-pipelines'
   description = 'A repository of pipelines for single-cell data in Nextflow DSL2'
   homePage = 'https://github.com/vib-singlecell-nf/vsn-pipelines'
   version = '0.19.0'
   mainScript = 'main.nf'
   defaultBranch = 'master'
   nextflowVersion = '!20.04.1'
}

params {
   global {
      project_name = '10x_PBMC_DSL2'
      seed = 777
      outdir = 'out'
      qsubaccount = ''
      qsubemail = ''
      species = 'human'
      genome {
         assembly = 'hg38'
      }
   }
   misc {
      test {
         enabled = false
      }
   }
   sc {
      scanpy {
         container = 'vibsinglecellnf/scanpy:0.5.0'
         report {
            annotations_to_plot = []
         }
         feature_selection {
            report_ipynb = '/src/scanpy/bin/reports/sc_select_variable_genes_report.ipynb'
            method = 'mean_disp_plot'
            minMean = 0.0125
            maxMean = 3
            minDisp = 0.5
            off = 'h5ad'
         }
         feature_scaling {
            method = 'zscore_scale'
            maxSD = 10
            off = 'h5ad'
         }
         neighborhood_graph {
            nPcs = 50
            off = 'h5ad'
         }
         dim_reduction {
            report_ipynb = '/src/scanpy/bin/reports/sc_dim_reduction_report.ipynb'
            pca {
               method = 'pca'
               nComps = 50
               off = 'h5ad'
            }
            umap {
               method = 'umap'
               off = 'h5ad'
            }
            tsne {
               method = 'tsne'
               nJobs = 10
               off = 'h5ad'
            }
         }
         clustering {
            report_ipynb = '/src/scanpy/bin/reports/sc_clustering_report.ipynb'
            method = 'louvain'
            resolutions = [0.4,0.8]
            off = 'h5ad'
         }
         marker_genes {
            method = 'wilcoxon'
            ngenes = 0
            groupby = 'louvain'
            off = 'h5ad'
         }
         filter {
            report_ipynb = '/src/scanpy/bin/reports/sc_filter_qc_report.ipynb'
            cellFilterMinNGenes = 200
            cellFilterMaxNGenes = 4000
            cellFilterMaxPercentMito = 0.15
            geneFilterMinNCells = 3
            off = 'h5ad'
            outdir = 'out'
         }
         data_transformation {
            method = 'log1p'
            off = 'h5ad'
         }
         normalization {
            method = 'cpx'
            countsPerCellAfter = 10000
            off = 'h5ad'
         }
      }
      scenic {
         container = 'aertslab/pyscenic:0.10.0'
         scenicoutdir = 'out/scenic/'
         report_ipynb = '/src/scenic/bin/reports/scenic_report.ipynb'
         filteredLoom = ''
         scenicOutputLoom = 'SCENIC_output.loom'
         scenicScopeOutputLoom = 'SCENIC_SCope_output.loom'
         mode = 'dask_multiprocessing'
         client_or_address = ''
         numWorkers = 20
         cell_id_attribute = 'CellID'
         gene_attribute = 'Gene'
         grn {
            labels {
               processExecutor = 'local'
            }
            algorithm = 'grnboost2'
            pmem = '2gb'
            maxForks = 1
            numWorkers = 15
            walltime = '23:59:59'
            tfs = '/ddn1/vol1/staging/leuven/stg_00002/lcb/cflerin/resources/allTFs_hg38.txt'
         }
         cistarget {
            labels {
               processExecutor = 'local'
            }
            adj = 'adj.tsv'
            type = ''
            output = 'reg.csv'
            rank_threshold = 5000
            auc_threshold = 0.05
            nes_threshold = 3.0
            min_orthologous_identity = 0.0
            max_similarity_fdr = 0.001
            annotations_fname = ''
            thresholds = '0.75,0.90'
            top_n_targets = 50
            top_n_regulators = '5,10,50'
            min_genes = 20
            pmem = '2gb'
            maxForks = 1
            numWorkers = 10
            walltime = '23:59:59'
            motifsDb = '/staging/leuven/res_00001/databases/cistarget/databases/homo_sapiens/hg38/refseq_r80/mc9nr/gene_based/hg38__refseq-r80__*feather'
            motifsAnnotation = '/staging/leuven/res_00001/databases/cistarget/motif2tf/motifs-v9-nr.hgnc-m0.001-o0.0.tbl'
            tracksDb = '/staging/leuven/res_00001/databases/cistarget/databases/homo_sapiens/hg38/refseq_r80/tc_v1/gene_based/encode_20190621__ChIP_seq_transcription_factor.hg38__refseq-r80__*feather'
            tracksAnnotation = '/staging/leuven/stg_00002/lcb/icistarget/data/annotations/homo_sapiens/hg38/track_annotations/encode_project_20190621__ChIP-seq_transcription_factor.homo_sapiens.hg38.bigwig_signal_pvalue.track_to_tf_in_motif_to_tf_format.tsv'
         }
         aucell {
            labels {
               processExecutor = 'local'
            }
            output = 'aucell_output.loom'
            rank_threshold = 5000
            auc_threshold = 0.05
            nes_threshold = 3.0
            pmem = '2gb'
            maxForks = 1
            numWorkers = 15
            walltime = '01:59:59'
         }
      }
      scope {
         genome = 'hg38'
         tree {
            level_1 = 'SCENICprotocol'
            level_2 = 'DSL2'
            level_3 = ''
         }
      }
      file_converter {
         tagCellWithSampleId = true
         useFilteredMatrix = true
         makeVarIndexUnique = false
      }
   }
   data {
      tenx {
         cellranger_mex = '/ddn1/vol1/staging/leuven/stg_00002/lcb/cflerin/analysis/pbmc10k/dsl2_0.19.0/pbmc10k/outs'
      }
   }
   utils {
      container = 'vibsinglecellnf/utils:0.3.0'
      workflow_configuration {
         report_ipynb = '/src/utils/bin/reports/workflow_configuration_template.ipynb'
      }
      publish {
         compressionLevel = 6
      }
   }
   parseConfig = { sample, paramsGlobal, paramsLocal ->
         def lv = { a,b -> return org.codehaus.groovy.runtime.MethodRankHelper.delDistance(a, b) }
         def pL = paramsLocal.collectEntries { k,v ->
            if (v instanceof Map) {
               if (v.containsKey(sample))
                  return [k, v[sample]]
               if (v.containsKey('default'))
                  return [k, v['default']]
               def closeMatches = v.collectEntries { vk, vv -> [lv(vk, sample), vk] }.keySet().findAll { it < 30}
               if(closeMatches.size() > 0)
                  throw new Exception("The sample " + sample + " is not found in " + v +" ; Make sure your samples are correctly specified when using the multi-sample feature.")
               else
                  return [k,v]
            } else {
               return [k,v]
         }
      }
      return [global: paramsGlobal, local: pL]
   }
}

process {
   executor = 'local'
   withLabel:qsub {
      executor = 'pbs'
   }
   withLabel:local {
      executor = 'local'
   }
}

timeline {
   enabled = true
   file = 'out/nextflow_reports/execution_timeline.html'
}

report {
   enabled = true
   file = 'out/nextflow_reports/execution_report.html'
}

trace {
   enabled = true
   file = 'out/nextflow_reports/execution_trace.txt'
}

dag {
   enabled = true
   file = 'out/nextflow_reports/pipeline_dag.svg'
}

min {
   enabled = false
}
