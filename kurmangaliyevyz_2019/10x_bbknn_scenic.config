manifest {
   name = 'vib-singlecell-nf/vsn-pipelines'
   description = 'A repository of pipelines for single-cell data in Nextflow DSL2'
   homePage = 'https://github.com/vib-singlecell-nf/vsn-pipelines'
   version = '0.11.0'
   mainScript = 'main.nf'
   defaultBranch = 'master'
   nextflowVersion = '!19.12.0-edge'
}

params {
   global {
      project_name = 'Kurmangaliyev2019_10x_Brain_Pupa_T4-T5'
      outdir = 'out'
      qsubaccount = ''
      species = 'fly'
      genome {
         assembly = 'dm6'
      }
   }
   sc {
      scope {
         genome = 'Flybase r6.31 pre-mRNA v3.1 (https://github.com/FlyCellAtlas/genome_references/commit/a0c77d922ce88d9df1f72b79ab59996898bac78c)'
         tree {
            level_1 = 'Brain'
            level_2 = 'Pupa'
            level_3 = 'T4/T5'
         }
      }
      file_converter {
         iff = '10x_cellranger_mex'
         off = 'h5ad'
         tagCellWithSampleId = true
         useFilteredMatrix = true
      }
      file_concatenator {
         join = 'outer'
         iff = '10x_cellranger_mex'
         off = 'h5ad'
      }
      scanpy {
         container = 'vibsinglecellnf/scanpy:0.5.0'
         filter {
            report_ipynb = '/src/scanpy/bin/reports/sc_filter_qc_report.ipynb'
            cellFilterMinNGenes = 1000
            cellFilterMaxNGenes = 2000
            cellFilterMaxPercentMito = 0.05
            geneFilterMinNCells = 3
            iff = '10x_cellranger_mex'
            off = 'h5ad'
            outdir = 'out'
         }
         data_transformation {
            dataTransformationMethod = 'log1p'
            iff = '10x_cellranger_mex'
            off = 'h5ad'
         }
         normalization {
            normalizationMethod = 'cpx'
            countsPerCellAfter = 10000
            iff = '10x_cellranger_mex'
            off = 'h5ad'
         }
         feature_selection {
            report_ipynb = '/src/scanpy/bin/reports/sc_select_variable_genes_report.ipynb'
            featureSelectionMethod = 'mean_disp_plot'
            featureSelectionMinMean = 0.01
            featureSelectionMaxMean = 5
            featureSelectionMinDisp = 0.5
            iff = '10x_cellranger_mex'
            off = 'h5ad'
         }
         feature_scaling {
            featureScalingMthod = 'zscore_scale'
            featureScalingMaxSD = 10
            iff = '10x_cellranger_mex'
            off = 'h5ad'
         }
         neighborhood_graph {
            iff = '10x_cellranger_mex'
            off = 'h5ad'
         }
         dim_reduction {
            report_ipynb = '/src/scanpy/bin/reports/sc_dim_reduction_report.ipynb'
            pca {
               dimReductionMethod = 'PCA'
               iff = '10x_cellranger_mex'
               off = 'h5ad'
            }
            umap {
               dimReductionMethod = 'UMAP'
               iff = '10x_cellranger_mex'
               off = 'h5ad'
            }
            tsne {
               dimReductionMethod = 't-SNE'
               nJobs = 10
               iff = '10x_cellranger_mex'
               off = 'h5ad'
            }
         }
         clustering {
            report_ipynb = '/src/scanpy/bin/reports/sc_clustering_report.ipynb'
            clusteringMethods = ['louvain','leiden']
            resolutions = [0.4, 0.8, 1.0, 1.2, 1.6, 2.0, 4.0]
            iff = '10x_cellranger_mex'
            off = 'h5ad'
         }
         marker_genes {
            method = 'wilcoxon'
            ngenes = 0
            groupby = 'louvain'
            off = 'h5ad'
         }
         batch_effect_correct {
            batchEffectCorrectionMethod = 'bbknn'
            report_ipynb = '/src/scanpy/bin/reports/sc_bbknn_report.ipynb'
            neighborsWithinBatch = 5
            trim = 0
            iff = '10x_cellranger_mex'
            off = 'h5ad'
         }
      }
      scenic {
         container = 'vibsinglecellnf/scenic:0.9.19'
         scenicoutdir = 'out/scenic/'
         report_ipynb = '/src/scenic/bin/reports/scenic_report.ipynb'
         filteredLoom = ''
         scenicOutputLoom = 'SCENIC_output.loom'
         scenicScopeOutputLoom = 'SCENIC_SCope_output.loom'
         mode = 'dask_multiprocessing'
         client_or_address = ''
         numWorkers = 8
         cell_id_attribute = 'CellID'
         gene_attribute = 'Gene'
         grn {
            seed = ''
            pmem = '2gb'
            maxForks = 1
            numWorkers = 16
            tfs = 'allTFs_dmel.txt'  // TO EDIT
         }
         cistarget {
            adj = 'adj.tsv'
            type = ''
            output = 'reg.csv'
            rank_threshold = 5000
            auc_threshold = 0.05
            nes_threshold = 3.0
            min_orthologous_identity = 0.0
            max_similarity_fdr = 0.001
            annotations_fname = ''
            thresholds = '0.75,0.90'
            top_n_targets = 50
            top_n_regulators = '5,10,50'
            min_genes = 20
            pmem = '2gb'
            maxForks = 1
            numWorkers = 8
            motifsDb = 'dm6-5kb-upstream-full-tx-11species.mc8nr.feather'  // TO EDIT
            motifsAnnotation = 'motifs-v8-nr.flybase-m0.001-o0.0.tbl'  // TO EDIT
            tracksDb = 'encode_modERN_20190621__ChIP_seq.max_GENEBASED.feather'  // TO EDIT
            tracksAnnotation = 'encode_modERN_20190621_dm6_annotation.track_to_tf_in_motif_to_tf_format.tsv'  // TO EDIT
         }
         aucell {
            output = 'aucell_output.loom'
            rank_threshold = 5000
            auc_threshold = 0.05
            nes_threshold = 3.0
            pmem = '2gb'
            maxForks = 1
            numWorkers = 8
         }
      }
      cellranger {
         container = 'vibsinglecellnf/cellranger:3.1.0'
         labels {
            processExecutor = 'local'
         }
         count {
            transcriptome = 'cellranger/3.1.0/flybase_r6.31_premrna_v3.1' // TO EDIT
            ppn = 16
            pmem = '6gb'
            walltime = '24:00:00'
            maxForks = 1
         }
      }
   }
   utils {
      container = 'vibsinglecellnf/utils:0.2.1'
      workflow_configuration {
         report_ipynb = '/src/utils/bin/reports/workflow_configuration_template.ipynb'
      }
      sra_metadata {
         mode = 'web'
      }
   }
   parseConfig = { sample, paramsGlobal, paramsLocal ->
       def pL = paramsLocal.collectEntries { k,v ->
           if (v instanceof Map) {
               if (v.containsKey(sample))
                   return [k, v[sample]]
               if (v.containsKey('default'))
                   return [k, v['default']]
                throw new Exception("Not a valid entry in " + k + ". The sample " + sample + " is not found in " + v +" ; Make sure your samples are correctly specified when using the multi-sample feature.")
           } else {
               return [k,v]
           }
       }
       return [global: paramsGlobal, local: pL]
   }
   data {
      sra = [[id:'SRP184201', samples:['*']]]
   }
   sratoolkit {
      container = 'vibsinglecellnf/sratoolkit:2.9.4-1.1.0'
      downloadFastqs {
         threads = 8
         maxForks = 1
      }
   }
   pcacv {
      container = 'vibsinglecellnf/pcacv:0.1.0'
      find_optimal_npcs {
         accessor = '@assays$RNA@scale.data'
         nCores = 8
      }
   }
}

process {
   withLabel:qsub {
      executor = 'pbs'
   }
   withLabel:local {
      executor = 'local'
   }
}

timeline {
   enabled = true
   file = 'out/nextflow_reports/execution_timeline.html'
}

report {
   enabled = true
   file = 'out/nextflow_reports/execution_report.html'
}

trace {
   enabled = true
   file = 'out/nextflow_reports/execution_trace.txt'
}

dag {
   enabled = true
   file = 'out/nextflow_reports/pipeline_dag.svg'
}

singularity {
   enabled = true
   autoMounts = true
   runOptions = '-B ' // TO EDIT
}
